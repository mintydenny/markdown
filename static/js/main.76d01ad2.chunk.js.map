{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","inputText","e","setState","target","value","handleTextUpdate","react_default","a","createElement","onChange","handleChange","bind","React","Component","Preview","innerHTML","__html","DOMPurify","sanitize","marked","console","log","id","dangerouslySetInnerHTML","App","_this2","updatedText","className","href","App_Editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2NCMlCC,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAMR,EAAKD,MAAMU,WAHHT,4EAMLU,GACXP,KAAKQ,SAAS,CACZH,KAAME,EAAEE,OAAOC,QAEjBV,KAAKJ,MAAMe,iBAAiBJ,EAAEE,OAAOC,wCAGrC,OACEE,EAAAC,EAAAC,cAAA,YAAUJ,MAAOV,KAAKJ,MAAMU,UAAWS,SAAUf,KAAKgB,aAAaC,KAAKjB,eAfzDkB,IAAMC,WAoB3B,SAASC,EAAQxB,GACf,IAAIyB,EAAY,CAACC,OAAQC,IAAUC,SAASC,IAAO7B,EAAMU,aAEzD,OADAoB,QAAQC,IAAIN,GACLT,EAAAC,EAAAC,cAAA,OAAKc,GAAI,UAAWC,wBAAyBR,QAiEvCS,cAzDb,SAAAA,EAAYlC,GAAM,IAAAmC,EAAA,OAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IAChBC,EAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAK,8VAHS0B,gFAkBDC,GACfhC,KAAKQ,SAAS,CACZH,KAAK2B,qCAIP,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,cAChBrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,mBACbrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,aAAf,mBAGArB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,cAAf,WACUrB,EAAAC,EAAAC,cAAA,KAAGoB,KAAK,wBAAwBzB,OAAO,UAAvC,kBAKhBG,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,kBACbrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,kBAAkBL,GAAG,kBAClChB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,0BAA0BL,GAAG,0BAC1ChB,EAAAC,EAAAC,cAACqB,EAAD,CAAQF,UAAU,iBAAiB3B,UAAWN,KAAKI,MAAMC,KAAMM,iBAAkBX,KAAKW,iBAAiBM,KAAKjB,UAGhHY,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,kBAAkBL,GAAG,mBAClChB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,0BAA0BL,GAAG,2BAC1ChB,EAAAC,EAAAC,cAACM,EAAD,CAASa,UAAU,kBAAkB3B,UAAWN,KAAKI,MAAMC,kBA9CrDa,IAAMC,WCxBJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.76d01ad2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport marked from 'marked'\r\nimport DOMPurify from 'dompurify'\r\n\r\nclass Editor extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      text: this.props.inputText\r\n    }\r\n  }\r\n  handleChange(e){\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n    this.props.handleTextUpdate(e.target.value)\r\n  }\r\n  render(){\r\n    return (\r\n      <textarea value={this.props.inputText} onChange={this.handleChange.bind(this)} />\r\n    );\r\n  }\r\n}\r\n\r\nfunction Preview(props){\r\n  let innerHTML = {__html: DOMPurify.sanitize(marked(props.inputText))}\r\n  console.log(innerHTML)\r\n  return <div id={\"preview\"} dangerouslySetInnerHTML={innerHTML} />\r\n}\r\n\r\nfunction Guide(){\r\n  return <h1> Guide </h1>\r\n}\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      text:'# This is a header. \\n\\n'\r\n      + '## This is a subheader. \\n\\n'\r\n      +  'This is a [website] \\n\\n'\r\n      + 'You can **bold**, *italicize*, ~~strikethrough~~ texts! \\n\\n'\r\n      + 'You can even display code: \\n\\n'\r\n      + '`print(\\'hello world!\\')` \\n\\n'\r\n      + '>This creates a block quote \\n\\n'\r\n      + '--- \\n'\r\n      + 'Todo \\n'\r\n      + '1. Add an adjustable slidebar\\n'\r\n      + '2. Add a guide on a side nav bar\\n'\r\n      + '[website]: https://dennymin.com/Markdown/'\r\n\r\n    }\r\n  }\r\n  handleTextUpdate(updatedText){\r\n    this.setState({\r\n      text:updatedText\r\n    });\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className=\"App-header-elem\">\r\n            <div className=\"App-title\">\r\n              Markdown Editor\r\n            </div>\r\n            <div className=\"App-credit\">\r\n              Made by <a href=\"https://dennymin.com/\" target=\"_blank\"> Denny Min </a>\r\n            </div>\r\n          </div>\r\n        {/*<Guide />*/}\r\n      </header>\r\n      <div className=\"main-container\">\r\n        <div className=\"content-wrapper\" id=\"editor-wrapper\">\r\n          <div className=\"content-wrapper-padding\" id=\"editor-wrapper-padding\">\r\n            <Editor className=\"content-editor\" inputText={this.state.text} handleTextUpdate={this.handleTextUpdate.bind(this)}/>\r\n          </div>\r\n        </div>\r\n        <div className=\"content-wrapper\" id=\"preview-wrapper\">\r\n          <div className=\"content-wrapper-padding\" id=\"preview-wrapper-padding\">\r\n            <Preview className=\"content-preview\" inputText={this.state.text}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n};\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}